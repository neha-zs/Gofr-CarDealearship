// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package service is a generated GoMock package.
package service

import (
	models "Project/CarDealearship/models"
	reflect "reflect"

	gofr "developer.zopsmart.com/go/gofr/pkg/gofr"
	gomock "github.com/golang/mock/gomock"
)

// MockCars is a mock of Cars interface.
type MockCars struct {
	ctrl     *gomock.Controller
	recorder *MockCarsMockRecorder
}

// MockCarsMockRecorder is the mock recorder for MockCars.
type MockCarsMockRecorder struct {
	mock *MockCars
}

// NewMockCars creates a new mock instance.
func NewMockCars(ctrl *gomock.Controller) *MockCars {
	mock := &MockCars{ctrl: ctrl}
	mock.recorder = &MockCarsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCars) EXPECT() *MockCarsMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCars) Create(ctx *gofr.Context, car *models.Car) (models.Car, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, car)
	ret0, _ := ret[0].(models.Car)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockCarsMockRecorder) Create(ctx, car interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCars)(nil).Create), ctx, car)
}

// Delete mocks base method.
func (m *MockCars) Delete(ctx *gofr.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCarsMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCars)(nil).Delete), ctx, id)
}

// GetByBrand mocks base method.
func (m *MockCars) GetByBrand(ctx *gofr.Context, brand string, isEngine bool) ([]models.Car, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByBrand", ctx, brand, isEngine)
	ret0, _ := ret[0].([]models.Car)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByBrand indicates an expected call of GetByBrand.
func (mr *MockCarsMockRecorder) GetByBrand(ctx, brand, isEngine interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByBrand", reflect.TypeOf((*MockCars)(nil).GetByBrand), ctx, brand, isEngine)
}

// GetByID mocks base method.
func (m *MockCars) GetByID(ctx *gofr.Context, id string) (models.Car, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(models.Car)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockCarsMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockCars)(nil).GetByID), ctx, id)
}

// Update mocks base method.
func (m *MockCars) Update(ctx *gofr.Context, id string, car *models.Car) (models.Car, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, car)
	ret0, _ := ret[0].(models.Car)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockCarsMockRecorder) Update(ctx, id, car interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCars)(nil).Update), ctx, id, car)
}
